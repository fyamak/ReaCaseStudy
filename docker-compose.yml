version: "3.7"

services:
  web:
    image: '${DOCKER_REGISTRY-}web'
    build:
      context: .
      dockerfile: src/Web/Dockerfile
    container_name: web_api
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      - db
      - kafka
      - redis
    networks:
      - cs_network
    links:
      - redis

  db:
    image: 'postgres:17'
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ReaLayeredV2
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    ports:
      - '5432:5423'
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
    networks:
      - cs_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - cs_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - cs_network
   
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafka_visualizer
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "PLAINTEXT://kafka:9092"
    depends_on:
      - kafka
    networks:
      - cs_network

  redis:
    image: redis:7.4
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - cs_network


networks:
  cs_network:
    external: true
volumes:
  pgdata: